name: üë• Team Automation

on:
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, closed, merged, review_requested, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  # ÏûêÎèô Ïù¥Ïäà Î∂ÑÎ•ò Î∞è Ìï†Îãπ
  issue-management:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest

    steps:
    - name: üìã Auto-label issues
      uses: github/issue-labeler@v3.4
      with:
        configuration-path: .github/issue-labeler.yml
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        enable-versioned-regex: 0

    - name: üë§ Auto-assign issues
      if: github.event.action == 'opened'
      uses: pozil/auto-assign-issue@v1.3.0
      with:
        assignees: 209512,BE12-OZ,zlfktm
        numOfAssignee: 1
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: üìä Move issue to project board (Backlog)
      if: github.event.action == 'opened'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const backlogOptionId = 'f75ad846';
          const contentId = context.payload.issue.node_id;

          try {
            // Add issue to project
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2Item(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `, { projectId, contentId });

            const itemId = addResponse.addProjectV2Item.item.id;

            // Update status field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, { projectId, itemId, fieldId: statusFieldId, optionId: backlogOptionId });
            
            console.log(`Issue moved to project board with item ID: ${itemId}`);
          } catch (error) {
            console.error('Error moving issue to project board:', error);
          }

  # PR ÏûêÎèô Í¥ÄÎ¶¨ (ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ)
  pr-management:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: üìÅ Checkout code
      uses: actions/checkout@v4

    - name: üë• Auto-assign reviewers
      if: github.event.action == 'opened' || github.event.action == 'ready_for_review'
      uses: kentaro-m/auto-assign-action@v1.2.6
      with:
        configuration-path: .github/auto-assign.yml

    - name: üè∑Ô∏è Auto-label PR
      uses: actions/labeler@v5
      with:
        configuration-path: .github/labeler.yml
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: üìä Move PR to project board
      if: github.event.action == 'opened'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('=== PR Project Board Integration ===');
          console.log('Event Name:', context.eventName);
          console.log('Action:', context.payload.action);
          
          // context.payload ÏÇ¨Ïö© (github.event ÎåÄÏã†)
          const payload = context.payload;
          
          if (!payload.pull_request) {
            console.log('‚ùå No pull_request found in payload');
            console.log('Available payload keys:', Object.keys(payload));
            return;
          }
          
          const pullRequest = payload.pull_request;
          console.log('‚úÖ Pull Request found:', pullRequest.number);
          
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const reviewOptionId = 'd677263c';
          const contentId = pullRequest.node_id;
          
          try {
            // Add PR to project
            const addResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2Item(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `, { projectId, contentId });
            
            const itemId = addResponse.addProjectV2Item.item.id;
            console.log('‚úÖ PR added to project. Item ID:', itemId);
            
            // Update status field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, { projectId, itemId, fieldId: statusFieldId, optionId: reviewOptionId });
            
            console.log('‚úÖ PR moved to Review status');
            
          } catch (error) {
            console.error('‚ùå Error:', error.message);
            if (error.response?.data?.errors) {
              console.error('GraphQL Errors:', error.response.data.errors);
            }
          }

    - name: üéâ Handle PR merge
      if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const pullRequest = context.payload.pull_request;
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const doneOptionId = '98236657';
          
          try {
            // Find project item by PR number
            const queryResponse = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });
            
            const matchingItem = queryResponse.node.items.nodes.find(item => 
              item.content && item.content.number === pullRequest.number
            );
            
            if (!matchingItem) {
              console.log('PR not found in project board');
              return;
            }
            
            // Update to Done status
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, { 
              projectId, 
              itemId: matchingItem.id, 
              fieldId: statusFieldId, 
              optionId: doneOptionId 
            });
            
            console.log('‚úÖ Merged PR moved to Done');
            
          } catch (error) {
            console.error('‚ùå Error moving merged PR:', error.message);
          }

  # ÏïåÎ¶º ÏãúÏä§ÌÖú
  notifications:
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: üì¢ Slack notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "GitHub Activity Alert",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ github.event_name == 'issues' && 'üìã' || 'üîÑ' }} *${{ github.event_name == 'issues' && 'Issue' || 'PR' }}* ${{ github.event.action }}\n*Repository:* ${{ github.repository }}\n*Actor:* ${{ github.actor }}\n*Title:* ${{ github.event.issue.title || github.event.pull_request.title }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: üí¨ Discord notification
      if: env.DISCORD_WEBHOOK != ''
      uses: Ilshidur/action-discord@master
      with:
        args: |
          üöÄ **${{ github.repository }}**
          ${{ github.event_name == 'issues' && 'üìã Issue' || 'üîÑ PR' }} **${{ github.event.action }}** by ${{ github.actor }}
          **Title:** ${{ github.event.issue.title || github.event.pull_request.title }}
          **Link:** ${{ github.event.issue.html_url || github.event.pull_request.html_url }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}