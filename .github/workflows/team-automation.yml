name: üë• Team Automation

on:
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, closed, merged, review_requested, ready_for_review]
  issue_comment:
    types: [created]

jobs:
  # ÏûêÎèô Ïù¥Ïäà Î∂ÑÎ•ò Î∞è Ìï†Îãπ
  issue-management:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    
    steps:
    - name: üìã Auto-label issues
      uses: github/issue-labeler @v3.4 # Check for latest version
      with:
        configuration-path: .github/issue-labeler.yml
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üë§ Auto-assign issues
      if: github.event.action == 'opened'
      uses: pozil/auto-assign-issue @v1.3.0 # Check for latest version
      with:
        assignees: 209512,BE12-OZ # Adjusted for backend-only project
        numOfAssignee: 1
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üìä Move issue to project board (Backlog)
      if: github.event.action == 'opened'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const backlogOptionId = 'f75ad846';
          const contentId = github.event.issue.node_id;

          // Add issue to project
          const addResponse = await github.graphql(`
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2Item(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }
          `, { projectId, contentId });

          const itemId = addResponse.addProjectV2Item.item.id;

          // Update status field
          await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: { singleSelectOptionId: $optionId }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `, { projectId, itemId, fieldId: statusFieldId, optionId: backlogOptionId });

  # PR ÏûêÎèô Í¥ÄÎ¶¨
  pr-management:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: üìÅ Checkout code
      uses: actions/checkout @v4
    
    - name: üë• Auto-assign reviewers
      if: github.event.action == 'opened' || github.event.action == 'ready_for_review'
      uses: kentaro-m/auto-assign-action @v1.2.6 # Check for latest version
      with:
        configuration-path: .github/auto-assign.yml
    
    - name: üè∑Ô∏è Auto-label PR
      uses: actions/labeler @v5 # Check for latest version
      with:
        configuration-path: .github/labeler.yml
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: üìä Move PR to board
      if: github.event.action == 'opened' && github.event_name == 'pull_request' # Add github.event_name check
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const reviewOptionId = 'd677263c';
          const contentId = github.event.pull_request.node_id;

          // Add PR to project
          const addResponse = await github.graphql(`
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2Item(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }
          `, { projectId, contentId });

          const itemId = addResponse.addProjectV2Item.item.id;

          // Update status field
          await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: { singleSelectOptionId: $optionId }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `, { projectId, itemId, fieldId: statusFieldId, optionId: reviewOptionId });
    
    - name: üéâ Celebrate merge
      if: github.event.action == 'merged' && github.event_name == 'pull_request' # Add github.event_name check
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectId = 'PVT_kwDODcPCt84BDOZc';
          const statusFieldId = 'PVTSSF_lADODcPCt84BDOZczg1NKqA';
          const doneOptionId = '98236657';
          const contentId = github.event.pull_request.node_id;

          // Find the project item ID for the merged PR
          const queryResponse = await github.graphql(`
            query($projectId: ID!, $contentId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 100, query: "content: ${contentId}") {
                    nodes {
                      id
                    }
                  }
                }
              }
            }
          `, { projectId, contentId });

          const itemId = queryResponse.node.items.nodes[0].id;

          // Update status field
          await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: { singleSelectOptionId: $optionId }
              }) {
                projectV2Item {
                  id
                }
              }
            }
          `, { projectId, itemId, fieldId: statusFieldId, optionId: doneOptionId });

  # ÏïåÎ¶º ÏãúÏä§ÌÖú
  notifications:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¢ Slack notification
      uses: 8398a7/action-slack @v3 # Check for latest version
      with:
        status: custom
        custom_payload: |
          {
            "text": "GitHub Activity Alert",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ github.event_name == 'issues' && 'üìã' || 'üîÑ' }} *${{ github.event_name == 'issues' && 'Issue' || 'PR' }}* ${{ github.event.action }}\n*Repository:* ${{ github.repository }}\n*Actor:* ${{ github.actor }}\n*Title:* ${{ github.event.issue.title || github.event.pull_request.title }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: üí¨ Discord notification
      uses: Ilshidur/action-discord @master # Check for latest version
      with:
        args: |
          üöÄ **${{ github.repository }}**\n          ${{ github.event_name == 'issues' && 'üìã Issue' || 'üîÑ PR' }} **${{ github.event.action }}** by ${{ github.actor }}\n          **Title:** ${{ github.event.issue.title || github.event.pull_request.title }}
          **Link:** ${{ github.event.issue.html_url || github.event.pull_request.html_url }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
