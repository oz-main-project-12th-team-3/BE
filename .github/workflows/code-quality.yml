name: Code Quality Check

on:
  push:
    branches: [ "main", "develop", "feature", "feature/**" ]
  pull_request:
    branches: [ "main", "develop", "feature", "feature/**" ]
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        default: '3.10'
        type: string
      skip-tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
    secrets:
      GITHUB_TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: false
      DISCORD_WEBHOOK:
        required: false

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: üîé Code Quality Check
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: üìÇ Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: üì• Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: üì• Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        
        # Install main dependencies
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Install dev dependencies if they exist
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        elif [ -f dev-requirements.txt ]; then
          pip install -r dev-requirements.txt
        else
          # Install common testing and linting tools
          pip install pytest pytest-django pytest-cov pytest-xvfb
          pip install ruff black isort mypy
          pip install pip-audit safety
        fi

    - name: üìä Cache test results
      uses: actions/cache@v4
      with:
        path: |
          .pytest_cache
          .ruff_cache
          .mypy_cache
        key: ${{ runner.os }}-test-cache-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-test-cache-${{ matrix.python-version }}-
          ${{ runner.os }}-test-cache-

    - name: üßπ Code formatting check
      id: code-formatting-check
      run: |
        echo "üîç Checking code formatting with ruff..."
        ruff format --check --diff .

    - name: üßΩ Lint with ruff
      id: lint-with-ruff
      run: |
        echo "üîç Running ruff linter..."
        ruff check . --output-format=github
        ruff check . --statistics || true

    - name: üìè Import sorting check
      id: import-sorting-check
      run: |
        echo "üîç Checking import sorting..."
        ruff check --select I .

    - name: üîç Type checking
      id: type-checking
      continue-on-error: true
      run: |
        if command -v mypy &> /dev/null; then
          echo "üîç Running type checking with mypy..."
          mypy . --ignore-missing-imports --show-error-codes || true
        else
          echo "‚ö†Ô∏è mypy not installed, skipping type checking"
        fi

    - name: üß™ Run Tests with Coverage
      id: run-tests-with-coverage
      if: ${{ !inputs.skip-tests }}
      run: |
        echo "üß™ Running tests with coverage..."
        
        # Check if Django project
        if python -c "import django" 2>/dev/null; then
          echo "üì± Detected Django project"
          export DJANGO_SETTINGS_MODULE=config.settings
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v
        else
          echo "üêç Running standard Python tests"
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v
        fi
      env:
        RUNNING_TESTS: 1
        PYTHONPATH: ${{ github.workspace }}

    - name: üìä Upload coverage to Codecov
      if: ${{ !inputs.skip-tests }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: üîí Security audit with pip-audit
      id: security-audit-with-pip-audit
      continue-on-error: true
      run: |
        echo "üîí Running security audit..."
        pip-audit --format=json --output=audit-results.json || true
        pip-audit --format=columns || true

    - name: üîí Security scan with safety
      id: security-scan-with-safety
      continue-on-error: true
      run: |
        if command -v safety &> /dev/null; then
          echo "üîí Running safety security scan..."
          safety check --json || true
        else
          echo "‚ö†Ô∏è safety not installed, installing and running..."
          pip install safety
          safety check || true
        fi

    - name: ‚òÅÔ∏è SonarCloud Analysis
      uses: SonarSource/sonarcloud-github-action@master
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        # Project-specific parameters (replace with your actual values)
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=your_project_key
          -Dsonar.organization=your_organization_key
          -Dsonar.sources=.
          -Dsonar.python.version=${{ matrix.python-version }}
          -Dsonar.python.coverage.reportPaths=coverage.xml # If you generate coverage.xml

    - name: üìà Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          audit-results.json
          .pytest_cache/
        retention-days: 30

    - name: üí¨ Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let comment = '## üîé Code Quality Report\n\n';
          
          // Add job status
          const jobStatus = '${{ job.status }}';
          const statusEmoji = jobStatus === 'success' ? '‚úÖ' : jobStatus === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
          comment += `${statusEmoji} **Overall Status:** ${jobStatus}\n\n`;
          
          // Add Python version info
          comment += `üêç **Python Version:** ${{ matrix.python-version }}\n\n`;
          
          // Add steps summary - Ïò¨Î∞îÎ•∏ step outcome Ï∞∏Ï°∞ Î∞©Î≤ï
          comment += '### Steps Summary:\n';
          comment += `- üßπ Code formatting: ${{ steps.code-formatting-check.outcome || 'skipped' }}\n`;
          comment += `- üßΩ Linting: ${{ steps.lint-with-ruff.outcome || 'skipped' }}\n`;
          comment += `- üìè Import sorting: ${{ steps.import-sorting-check.outcome || 'skipped' }}\n`;
          comment += `- üîç Type checking: ${{ steps.type-checking.outcome || 'skipped' }}\n`;
          comment += `- üß™ Tests: ${{ steps.run-tests-with-coverage.outcome || 'skipped' }}\n`;
          comment += `- üîí Security audit: ${{ steps.security-audit-with-pip-audit.outcome || 'skipped' }}\n\n`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üîé Code Quality Report')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  notify:
    needs: code-quality
    if: always() && (secrets.SLACK_WEBHOOK_URL != '' || secrets.DISCORD_WEBHOOK != '')
    runs-on: ubuntu-latest

    steps:
    - name: üì¢ Slack notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "Code Quality Check Results",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ needs.code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} *Code Quality Check* ${{ needs.code-quality.result }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Actor:* ${{ github.actor }}"
                }
              }
            ]
          }

    - name: üí¨ Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      if: env.DISCORD_WEBHOOK != ''
      uses: Ilshidur/action-discord@master
      with:
        args: |
          ${{ needs.code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} **Code Quality Check ${{ needs.code-quality.result }}**
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Actor:** ${{ github.actor }}"